// 3rd party
using AutoMapper;
using Newtonsoft.Json;
// Microsoft
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
// System
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Linq.Expressions;
using System.Collections.Generic;
// VipcoMaintenance
using VipcoSafety.Models;
using VipcoSafety.Models.Machines;
using VipcoSafety.Models.LiftingWorkPermits;
using VipcoSafety.Models.ConfinedSpaceWorkPermits;
using VipcoSafety.Helpers;
using VipcoSafety.Services;
using VipcoSafety.ViewModels;
using VipcoSafety.Helper;
using System.Globalization;

using ClosedXML.Excel;
using System.Reflection;
using System.IO;

namespace VipcoSafety.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AllWorkPermitController : ControllerBase
    {
        private readonly IRepositorySafety<Lifting1WorkPermit> repositoryLifting;
        private readonly IRepositorySafety<ConfinedSpaceWorkPermit> repositoryConfinedSpace;
        private readonly IMapper mapper;
        private readonly Helpers.EmailClass EmailClass;

        public AllWorkPermitController(IRepositorySafety<Lifting1WorkPermit> repoLifting,
            IRepositorySafety<ConfinedSpaceWorkPermit> repoConfinedSpace, 
            IMapper mapper) 
        {
            this.repositoryLifting = repoLifting;
            this.repositoryConfinedSpace = repoConfinedSpace;
            this.mapper = mapper;
            this.EmailClass = new EmailClass();
        }

        #region PrivateMethod

        public JsonSerializerSettings DefaultJsonSettings =>
        new JsonSerializerSettings()
        {
            Formatting = Formatting.Indented,
            PreserveReferencesHandling = PreserveReferencesHandling.Objects,
            ReferenceLoopHandling = ReferenceLoopHandling.Ignore
        };
        private async Task<bool> SendMail(string MailTo,string EmpName,string WorkName, bool isApproved = true)
        {
            if (!string.IsNullOrEmpty(MailTo) && !string.IsNullOrEmpty(EmpName))
            {
                var ListMail = new List<string>();
                if (!string.IsNullOrEmpty(MailTo))
                {
                    if (MailTo.IndexOf(',') != -1)
                        ListMail = MailTo.Split(',').ToList();
                    else if (MailTo.IndexOf(';') != -1)
                        ListMail = MailTo.Split(';').ToList();
                    else
                        ListMail.Add(MailTo);
                }

                if (ListMail.Any())
                {
                    var BodyMessage = "<body style=font-size:11pt;font-family:Tahoma>" +
                                     "<h4 style='color:steelblue;'>เมล์ฉบับนี้เป็นแจ้งเตือนจากระบบงาน VIPCO SAFETY SYSTEM</h4>" +
                                     $"เรียน {EmpName}" +
                                     $"<p>เรื่อง คำขออนุมัติ \"{WorkName}\"</p><hr></hr>" +
                                     $"<p>ณ ขณะนี้คำขอดังกล่าวได้รับการ \" {(isApproved ? "<span style='color:blue;'>อนุมัติตามคำขอ</span>" : "<span style='color:red;'>ยกเลิกคำขอ</span>")}\" โดยหน่วยงานความปลอดภัย</p>" +
                                     $"<p>หากมีขอสงสัยใดโปรดติดต่อกับทางหน่วยงานความปลอดภัย</p>" +
                                     "<span style='color:steelblue;'>This mail auto generated by VIPCO MACHINE SYSTEM. Do not reply this email.</span>" +
                                "</body>";

                    return await this.EmailClass.SendMailMessage(ListMail.FirstOrDefault(), EmpName, ListMail,
                                         BodyMessage, "Notification mail from VIPCO Machine system.");
                }
            }
            return false;
        }
        public async Task<bool> LiftingWorkPermitUpdate(int LiftingWorkPermitId, AllWorkPermitViewModel record,bool isCancel = false)
        {
            if (LiftingWorkPermitId > 0)
            {
                var isSafetyComplate = false;
                var HasData = await this.repositoryLifting.GetFirstOrDefaultAsync(x => x, x => x.Lifting1WorkPermitId == LiftingWorkPermitId);
                if (isCancel)
                    HasData.StatusWorkPermit = StatusWorkPermit.Cancelled;
                else
                {
                    if (HasData.StatusWorkPermit == StatusWorkPermit.Require)
                    {
                        HasData.ApprovedDate = DateTime.Now;
                        HasData.StatusWorkPermit = StatusWorkPermit.Approved;
                        isSafetyComplate = true;
                    }

                    HasData.ComplateBy = record.ComplateBy;
                    HasData.ComplateByName = record.ComplateString;
                    HasData.ComplateDate = DateTime.Now;
                    HasData.ComplateTimeString = DateTime.Now.ToString("HH:mm");
                }
                
                HasData.ModifyDate = DateTime.Now;
                HasData.Modifyer = record.ComplateBy;

                var result = await this.repositoryLifting.UpdateAsync(HasData, LiftingWorkPermitId) != null;
                if (isCancel)
                    await this.SendMail(HasData.RepayMail, HasData.RequireByEmpName, "Lifting Work Permit",false);
                if (isSafetyComplate)
                    await this.SendMail(HasData.RepayMail, HasData.RequireByEmpName, "Lifting Work Permit");
                return result;
            }

            return false;
        }
        public async Task<bool> ConfinedSpaceWorkPermitUpdate(int ConfinedSpaceId, AllWorkPermitViewModel record, bool isCancel = false)
        {
            if (ConfinedSpaceId > 0)
            {
                var isSafetyComplate = false;
                var HasData = await this.repositoryConfinedSpace.GetFirstOrDefaultAsync(x => x, x => x.ConfinedSpaceWorkPermitId == ConfinedSpaceId);
                if (isCancel)
                    HasData.StatusWorkPermit = StatusWorkPermit.Cancelled;
                else
                {
                    if (HasData.StatusWorkPermit == StatusWorkPermit.Require)
                    {
                        HasData.ApprovedDate = DateTime.Now;
                        HasData.StatusWorkPermit = StatusWorkPermit.Approved;
                        isSafetyComplate = true;
                    }

                    HasData.ComplateBy = record.ComplateBy;
                    HasData.ComplateByName = record.ComplateString;
                    HasData.ComplateDate = DateTime.Now;
                    HasData.ComplateTimeString = DateTime.Now.ToString("HH:mm");
                    HasData.WorkComplate = true;
                    HasData.AreaClear = true;
                    HasData.KeepOutClear = true;
                }

                HasData.ModifyDate = DateTime.Now;
                HasData.Modifyer = record.ComplateBy;

                var result = await this.repositoryConfinedSpace.UpdateAsync(HasData, ConfinedSpaceId) != null;
                if (isCancel)
                    await this.SendMail(HasData.RepayMail, HasData.RequireByEmpName, "Confined Space Work Permit",false);
                if (isSafetyComplate)
                    await this.SendMail(HasData.RepayMail, HasData.RequireByEmpName, "Confined Space Work Permit");
                return result;
            }
            return false;
        }

        #endregion

        // POST: api/AllWorkPermit/GetScroll
        [HttpPost("GetScroll")]
        public async Task<IActionResult> GetScroll(ScrollViewModel Scroll)
        {
            var Message = "Data not been found.";
            try
            {
                if (Scroll != null)
                {
                    var HasData = new List<AllWorkPermitViewModel>();
                    Scroll.EDate = Scroll.EDate.Value.AddDays(1);

                    #region LiftingWorkPermit
                    Expression<Func<Lifting1WorkPermit, bool>> predicate = x =>
                               x.LiftDate.Value.Date >= Scroll.SDate.Value.Date &&
                               x.LiftDate.Value.Date <= Scroll.EDate.Value.Date;

                    if (!string.IsNullOrEmpty(Scroll.Where))
                        predicate = predicate.And(x => x.RequireByEmpCode == Scroll.Where);

                    var hadLifting = await this.repositoryLifting.GetToListAsync(
                            x => x, predicate,
                            null, x => x.Include(z => z.GroupWorkPermit));

                    foreach (var item in hadLifting)
                    {
                        HasData.Add(new AllWorkPermitViewModel
                        {
                            GroupWPId = item.GroupWorkPermitId,
                            GroupWPName = item.GroupWorkPermit.Name,
                            WorkPermitDate = item.LiftDate,
                            RequireByCode = item.RequireByEmpCode,
                            RequireByName = item.RequireByEmpName,
                            StatusWorkPermit = item.StatusWorkPermit,
                            WorkPermitId = item.Lifting1WorkPermitId,
                            Complate = item.ComplateDate != null,
                            ComplateBy = item.ComplateBy,
                            ComplateString = item.ComplateByName,
                            ComplateDate = item.ComplateDate
                        });
                    }
                    #endregion

                    #region ConfinedSpaceWorkPermit

                    Expression<Func<ConfinedSpaceWorkPermit, bool>> predicate1 = x =>
                              x.WpStartDate.Value.Date >= Scroll.SDate.Value.Date &&
                              x.WpEndDate.Value.Date <= Scroll.EDate.Value.Date;

                    if (!string.IsNullOrEmpty(Scroll.Where))
                        predicate1 = predicate1.And(x => x.RequireByEmpCode == Scroll.Where);

                    var hadConfined = await this.repositoryConfinedSpace.GetToListAsync(
                            x => x, predicate1,
                            null, x => x.Include(z => z.GroupWorkPermit));

                    foreach (var item in hadConfined)
                    {
                        HasData.Add(new AllWorkPermitViewModel
                        {
                            GroupWPId = item.GroupWorkPermitId,
                            GroupWPName = item.GroupWorkPermit.Name,
                            WorkPermitDate = item.WpStartDate,
                            RequireByCode = item.RequireByEmpCode,
                            RequireByName = item.RequireByEmpName,
                            StatusWorkPermit = item.StatusWorkPermit,
                            WorkPermitId = item.ConfinedSpaceWorkPermitId,
                            Complate = item.ComplateDate != null,
                            ComplateBy = item.ComplateBy,
                            ComplateString = item.ComplateByName,
                            ComplateDate = item.ComplateDate
                        });
                    }

                    #endregion

                    if (HasData.Any())
                    {
                        Func<IEnumerable<AllWorkPermitViewModel>, IOrderedEnumerable<AllWorkPermitViewModel>> order;

                        switch (Scroll.SortField)
                        {
                            case "GroupWPName":
                                if (Scroll.SortOrder == -1)
                                    order = o => o.OrderByDescending(x => x.GroupWPName);
                                else
                                    order = o => o.OrderBy(x => x.GroupWPName);
                                break;
                            case "WorkPermitDateString":
                                if (Scroll.SortOrder == -1)
                                    order = o => o.OrderByDescending(x => x.WorkPermitDate);
                                else
                                    order = o => o.OrderBy(x => x.WorkPermitDate);
                                break;
                            case "RequireByName":
                                if (Scroll.SortOrder == -1)
                                    order = o => o.OrderByDescending(x => x.RequireByName);
                                else
                                    order = o => o.OrderBy(x => x.RequireByName);
                                break;
                            case "StatusWorkPermitString":
                                if (Scroll.SortOrder == -1)
                                    order = o => o.OrderByDescending(x => x.StatusWorkPermit);
                                else
                                    order = o => o.OrderBy(x => x.StatusWorkPermit);
                                break;
                            case "ComplateDateString":
                                if (Scroll.SortOrder == -1)
                                    order = o => o.OrderByDescending(x => x.ComplateDate);
                                else
                                    order = o => o.OrderBy(x => x.ComplateDate);
                                break;
                            default:
                                order = o => o.OrderByDescending(x => x.WorkPermitDate);
                                break;
                        }
                        return new JsonResult(new ScrollDataViewModel<AllWorkPermitViewModel>(Scroll, order(HasData)), this.DefaultJsonSettings);

                    }
                }
            }
            catch(Exception ex)
            {
                Message = $"Has error {ex.ToString()}";
            }

            return BadRequest(new { Error = Message });
        }

        // POST: api/AllWorkPermit/SetComplate
        [HttpPost("SetComplate")]
        public async Task<IActionResult> SetComplate(AllWorkPermitViewModel record)
        {
            var Message = "Data not been found.";
            try
            {
                var Result = false;
                if (record != null)
                {
                    switch (record.GroupWPName)
                    {
                        case "CONFINED SPACE WORK PERMIT":
                            Result = await this.ConfinedSpaceWorkPermitUpdate(record.WorkPermitId, record,record.IsCancel ?? false);
                            break;
                        case "LIFTING EQUIPMENT WORK PERMIT":
                            Result = await this.LiftingWorkPermitUpdate(record.WorkPermitId, record,record.IsCancel ?? false);
                            break;
                    }
                }
                return new JsonResult(new { Result }, this.DefaultJsonSettings);
            }
            catch(Exception ex)
            {
                Message = $"Has error {ex.ToString()}";
            }

            return BadRequest(new { Error = Message });
        }
      
    }
}
